
//
// execute:
//  - python testdrive.py
//
// %%VARIABLE%% will be replaced with consts by python code
//
// author: minu jeong
//


#version 430

#define X %%X%%
#define Y %%Y%%
#define Z %%Z%%
#define W %%W%%
#define H %%H%%

layout(local_size_x=X, local_size_y=Y, local_size_z=Z) in;
layout (std430, binding=0) buffer in_0
{
    vec4 inxs[1];
};

layout (std430, binding=1) buffer out_0
{
    vec4 outxs[1];
};

layout (std430, binding=2) buffer uv_0
{
    vec2 uvs[1];
};

#define win_width 3
#define win_height 3
#define win_wh 49
#define median_i 24
float window[win_wh] = {
    // should manually initialize this
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0
};

void main()
{
    // define consts
    const uint gx = gl_WorkGroupID.x;
    const uint x = gl_LocalInvocationID.x;
    const uint y = gl_LocalInvocationID.y;
    const uint group_offset = gx * W;
    const uint frag_i = y * X + x + group_offset;

    float aaa = 0.0;
    // read window
    for (uint win_x = -win_width; win_x <= win_width; win_x++)
    {
        for (uint win_y = -win_width; win_y <= win_width; win_y++)
        {
            uint win_i = win_y * (win_width * 2 + 1) + win_x;
            uint src_i = frag_i + win_i;
            window[win_i] = inxs[src_i].x;

            aaa = inxs[src_i].x;
        }
    }

    // simple bubble sort to find median
    while(true)
    {
        bool is_swapped = false;
        for (uint win_i = win_wh - 1; win_i > 0; win_i--)
        {
            if (window[win_i - 1] > window[win_i])
            {
                // swap
                float _temp = window[win_i];
                window[win_i - 1] = window[win_i];
                window[win_i] = _temp;
                is_swapped = true;
            }
        }

        if (!is_swapped)
        {
            break;
        }
    }
    float median = window[median_i];

    // return to buffer
    outxs[frag_i - 1] = vec4(1.0, 0.75, aaa, 1.0);
}
